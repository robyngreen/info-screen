'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = require('styled-jsx/style.js');

var _style2 = _interopRequireDefault(_style);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/robyngreen/Sites/info-screen/components/Calendar.js';

var dev = process.env.NODE_ENV !== 'prod';

var Calendar = function (_React$Component) {
  (0, _inherits3.default)(Calendar, _React$Component);

  function Calendar() {
    (0, _classCallCheck3.default)(this, Calendar);

    // Set defaults.
    var _this = (0, _possibleConstructorReturn3.default)(this, (Calendar.__proto__ || (0, _getPrototypeOf2.default)(Calendar)).call(this));

    _this.state = {
      key: 'AIzaSyDOzStmGXlCBYxgCKLPruGgqQGGxIfnIaI',
      numEvents: 5,
      calendarAPI: 'https://www.googleapis.com/calendar/v3/calendars/e12nasfpqrj49m0qjdqug5u05o%40group.calendar.google.com/events?orderBy=startTime&singleEvents=true',
      events: [],
      week: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
      month: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    };
    return _this;
  }

  (0, _createClass3.default)(Calendar, [{
    key: 'buildCalendar',
    value: function buildCalendar() {
      var self = this;
      var timeMin = new Date(Date.now()).toISOString();
      var gcalURL = this.state.calendarAPI + '&maxResults=' + this.state.numEvents + '&timeMin=' + timeMin + '&key=' + this.state.key;

      this.serverRequest = _axios2.default.all([_axios2.default.get(gcalURL)]).then(_axios2.default.spread(function (calendar) {
        self.setState({
          events: calendar.data.items
        });
      }));
    }

    /**
     * Precall before render.
     */

  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.buildCalendar();
    }

    /**
     * Called whenever the component is mounted.
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var self = this;
      // Only refresh on prod.
      if (!dev) {
        // In milliseconds, so * 1000 to end.
        // 60 minutes * 60 seconds * 1000 milliseconds.
        var refreshTime = 60 * 60 * 1000;
        window.setInterval(function () {
          self.getWeatherData();
        }.bind(this), refreshTime);
      }
    }

    /**
     * Renders markup
     * @return string Any html
     */

  }, {
    key: 'render',
    value: function render() {
      var self = this;
      var today = new Date();
      var todayMonth = today.getMonth() + 1;
      if (todayMonth < 10) {
        todayMonth = '0' + todayMonth;
      }
      var todayDay = today.getDate();
      if (todayDay < 10) {
        todayDay = '0' + todayDay;
      }
      var todayDate = today.getFullYear() + '-' + todayMonth + '-' + todayDay;
      return _react2.default.createElement('div', {
        className: 'jsx-1050363683' + ' ' + 'calendar',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, self.state.events.map(function (event) {
        var date = new Date(event.start.date + 'T12:00:00Z');
        var dow = date.getDay();
        var day = date.getDate();
        var month = date.getMonth();
        var todayClass = '';
        if (event.start.date === todayDate) {
          todayClass = 'today';
        }
        return _react2.default.createElement('div', { key: event.id, className: 'jsx-1050363683' + ' ' + (todayClass + ' eventItem' || ''),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 89
          }
        }, _react2.default.createElement('div', {
          className: 'jsx-1050363683' + ' ' + 'eventDate',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 90
          }
        }, self.state.week[dow], ', ', self.state.month[month], ' ', day), _react2.default.createElement('div', {
          className: 'jsx-1050363683' + ' ' + 'eventTitle',
          __source: {
            fileName: _jsxFileName,
            lineNumber: 91
          }
        }, event.summary));
      }), _react2.default.createElement(_style2.default, {
        styleId: '1050363683',
        css: '.calendar.jsx-1050363683{font-family:\'SST-condensed\';color:#fff;margin-top:3em;text-align:right;margin-left:auto;width:95%;}.eventItem.jsx-1050363683{margin-bottom:1.75em;padding:5px 10px 0 0;}.eventDate.jsx-1050363683{font-size:2.25rem;}.eventTitle.jsx-1050363683{font-size:1.5rem;}.today.jsx-1050363683{background:rgba(0,208,255,0.19);border-radius:5px;border:1px solid rgba(255,255,255,0.1);}'
      }));
    }
  }]);

  return Calendar;
}(_react2.default.Component);

exports.default = Calendar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiZGV2IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiQ2FsZW5kYXIiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3RoaXMiLCJfX3Byb3RvX18iLCJjYWxsIiwic3RhdGUiLCJrZXkiLCJudW1FdmVudHMiLCJjYWxlbmRhckFQSSIsImV2ZW50cyIsIndlZWsiLCJtb250aCIsInZhbHVlIiwiYnVpbGRDYWxlbmRhciIsInNlbGYiLCJ0aW1lTWluIiwiRGF0ZSIsIm5vdyIsInRvSVNPU3RyaW5nIiwiZ2NhbFVSTCIsInNlcnZlclJlcXVlc3QiLCJhbGwiLCJnZXQiLCJ0aGVuIiwic3ByZWFkIiwiY2FsZW5kYXIiLCJzZXRTdGF0ZSIsImRhdGEiLCJpdGVtcyIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwicmVmcmVzaFRpbWUiLCJ3aW5kb3ciLCJzZXRJbnRlcnZhbCIsImdldFdlYXRoZXJEYXRhIiwiYmluZCIsInJlbmRlciIsInRvZGF5IiwidG9kYXlNb250aCIsImdldE1vbnRoIiwidG9kYXlEYXkiLCJnZXREYXRlIiwidG9kYXlEYXRlIiwiZ2V0RnVsbFllYXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJtYXAiLCJldmVudCIsImRhdGUiLCJzdGFydCIsImRvdyIsImdldERheSIsImRheSIsInRvZGF5Q2xhc3MiLCJpZCIsInN1bW1hcnkiLCJzdHlsZUlkIiwiY3NzIiwiQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBSEEsSUFBSUEsZUFBZSw0REFBbkI7O0FBSUEsSUFBSUMsTUFBTUMsUUFBUUMsR0FBUixDQUFZQyxRQUFaLEtBQXlCLE1BQW5DOztBQUVB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