'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = require('styled-jsx/style.js');

var _style2 = _interopRequireDefault(_style);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/robyngreen/Sites/info-screen/components/Time.js';


var Time = function (_React$Component) {
  (0, _inherits3.default)(Time, _React$Component);

  function Time() {
    (0, _classCallCheck3.default)(this, Time);

    return (0, _possibleConstructorReturn3.default)(this, (Time.__proto__ || (0, _getPrototypeOf2.default)(Time)).call(this));
  }

  /**
   * Sets all the time variables.
   */

  (0, _createClass3.default)(Time, [{
    key: 'setTime',
    value: function setTime() {

      var currentdate = new Date();
      var hours = currentdate.getHours();
      var week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      var day = currentdate.getDay();

      var ampm = 'a.m.';
      // Correct for number over 24, and negatives.
      if (hours > 12) {
        hours -= 12;
        ampm = 'p.m.';
      }

      // minutes are the same on every time zone
      var minutes = currentdate.getUTCMinutes();

      // add leading zero, first convert hours to string
      minutes = minutes + "";
      if (minutes.length == 1) {
        minutes = "0" + minutes;
      }

      this.setState({
        dow: week[day],
        month: month[currentdate.getMonth()],
        day: currentdate.getDate(),
        hours: hours,
        minutes: minutes,
        ampm: ampm
      });
    }

    /**
     * Right before it's set, process some items.
     */

  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.setTime();
    }

    /**
     * Called whenever the component is mounted.
     */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.setInterval(function () {
        this.setTime();
      }.bind(this), 1000);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', {
        className: 'jsx-1010494720' + ' ' + 'time',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 63
        }
      }, _react2.default.createElement('div', {
        className: 'jsx-1010494720' + ' ' + 'dow-month-day',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 64
        }
      }, this.state.dow, ', ', this.state.month, ' ', this.state.day), _react2.default.createElement('div', {
        className: 'jsx-1010494720' + ' ' + 'current-time',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }, this.state.hours, ':', this.state.minutes, ' ', this.state.ampm), _react2.default.createElement(_style2.default, {
        styleId: '1010494720',
        css: '.time.jsx-1010494720{font-family:\'SST-light\';color:#fff;text-shadow:1px 1px rgba(0,0,0,0.25);margin-top:20px;padding-right:10px;}.dow-month-day.jsx-1010494720{font-family:\'SST-condensed\';text-align:right;font-size:3rem;margin:-20px 0;}.current-time.jsx-1010494720{text-align:right;font-size:5rem;}'
      }));
    }
  }]);

  return Time;
}(_react2.default.Component);

exports.default = Time;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiVGltZSIsIl9SZWFjdCRDb21wb25lbnQiLCJfX3Byb3RvX18iLCJjYWxsIiwia2V5IiwidmFsdWUiLCJzZXRUaW1lIiwiY3VycmVudGRhdGUiLCJEYXRlIiwiaG91cnMiLCJnZXRIb3VycyIsIndlZWsiLCJtb250aCIsImRheSIsImdldERheSIsImFtcG0iLCJtaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsImxlbmd0aCIsInNldFN0YXRlIiwiZG93IiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJ3aW5kb3ciLCJzZXRJbnRlcnZhbCIsImJpbmQiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJzdGF0ZSIsInN0eWxlSWQiLCJjc3MiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0FBRkEsSUFBSUEsZUFBZSx3REFBbkI7OztBQUlBLElBQUlDLE9BQU8sVUFBVUMsZ0JBQVYsRUFBNEI7QUFDckMsMEJBQVVELElBQVYsRUFBZ0JDLGdCQUFoQjs7QUFFQSxXQUFTRCxJQUFULEdBQWdCO0FBQ2Qsa0NBQWdCLElBQWhCLEVBQXNCQSxJQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxLQUFLRSxTQUFMLElBQWtCLDhCQUF1QkYsSUFBdkIsQ0FBbkIsRUFBaURHLElBQWpELENBQXNELElBQXRELENBQWpDLENBQVA7QUFDRDs7QUFFRDs7OztBQUtBLDZCQUFhSCxJQUFiLEVBQW1CLENBQUM7QUFDbEJJLFNBQUssU0FEYTtBQUVsQkMsV0FBTyxTQUFTQyxPQUFULEdBQW1COztBQUV4QixVQUFJQyxjQUFjLElB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