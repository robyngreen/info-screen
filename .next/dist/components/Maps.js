'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _style = require('styled-jsx/style.js');

var _style2 = _interopRequireDefault(_style);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _googleMapReact = require('google-map-react');

var _googleMapReact2 = _interopRequireDefault(_googleMapReact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/robyngreen/Sites/info-screen/components/Maps.js';

var dev = process.env.NODE_ENV !== 'prod';

var Maps = function (_React$Component) {
  (0, _inherits3.default)(Maps, _React$Component);

  function Maps() {
    (0, _classCallCheck3.default)(this, Maps);

    // Set defaults.
    var _this = (0, _possibleConstructorReturn3.default)(this, (Maps.__proto__ || (0, _getPrototypeOf2.default)(Maps)).call(this));

    _this.state = {
      center: { lat: 34.8915512, lng: -92.3031572 },
      zoom: 10,
      radar: 'http://api.wunderground.com/api/13d3adca9dd11d63/animatedradar/q/AR/Conway.png?width=500&height=400&newmaps=1&timelabel=1&timelabel.y=10&num=5&delay=50&smooth=1&noclutter=1&rainsnow=1'
    };
    return _this;
  }

  /**
   * Called whenever the component is mounted.
   */

  (0, _createClass3.default)(Maps, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var self = this;
      // Only refresh on prod.
      if (!dev) {
        // In milliseconds, so * 1000 to end.
        // 60 minutes * 60 seconds * 1000 milliseconds.
        var refreshTime = 15 * 60 * 1000;
        window.setInterval(function () {
          self.setState({
            radar: self.state.radar
          });
        }.bind(this), refreshTime);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var radarIMG = _react2.default.createElement('img', { src: this.state.radar });
      return _react2.default.createElement('div', {
        className: 'jsx-3694016239' + ' ' + 'map-wrapper',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      }, _react2.default.createElement('div', {
        className: 'jsx-3694016239' + ' ' + 'weather-map map',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      }, radarIMG), _react2.default.createElement('div', {
        className: 'jsx-3694016239' + ' ' + 'traffic-map map',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, _react2.default.createElement(_googleMapReact2.default, {
        bootstrapURLKeys: { key: "AIzaSyDOzStmGXlCBYxgCKLPruGgqQGGxIfnIaI" },
        className: 'traffic-map map',
        defaultCenter: this.state.center,
        defaultZoom: this.state.zoom,
        layerTypes: ['TrafficLayer'], __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      })), _react2.default.createElement(_style2.default, {
        styleId: '3694016239',
        css: '.map-wrapper.jsx-3694016239{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;bottom:25px;}.map.jsx-3694016239{width:500px;border:1px solid white;height:400px;margin:0 20px;}'
      }));
    }
  }]);

  return Maps;
}(_react2.default.Component);

exports.default = Maps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiZGV2IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiTWFwcyIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGhpcyIsIl9fcHJvdG9fXyIsImNhbGwiLCJzdGF0ZSIsImNlbnRlciIsImxhdCIsImxuZyIsInpvb20iLCJyYWRhciIsImtleSIsInZhbHVlIiwiY29tcG9uZW50RGlkTW91bnQiLCJzZWxmIiwicmVmcmVzaFRpbWUiLCJ3aW5kb3ciLCJzZXRJbnRlcnZhbCIsInNldFN0YXRlIiwiYmluZCIsInJlbmRlciIsInJhZGFySU1HIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsImNsYXNzTmFtZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiYm9vdHN0cmFwVVJMS2V5cyIsImRlZmF1bHRDZW50ZXIiLCJkZWZhdWx0Wm9vbSIsImxheWVyVHlwZXMiLCJzdHlsZUlkIiwiY3NzIiwiQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBSEEsSUFBSUEsZUFBZSx3REFBbkI7O0FBSUEsSUFBSUMsTUFBTUMsUUFBUUMsR0FBUixDQUFZQyxRQUFaLEtBQXlCLE1BQW5DOztBQUVBLElBQUlDLE9BQU8sVUFBVUMsZ0JBQVYsRUFBNEI7QUFDckMsMEJBQVVELElBQVYsRUFBZ0JDLGdCQUFoQjs7QUFFQSxXQUFTRCxJQUFULEdBQWdCO0FBQ2Qsa0NBQWdCLElBQWhCLEVBQXNCQSxJQUF0Qjs7QUFFQTtBQUNBLFFBQUlFLFFBQVEseUNBQTJCLElBQTNCLEVBQWlDLENBQUNGLEtBQUtHLFNBQUwsSUFBa0IsOEJBQXVCSCxJQUF2QixDQUFuQixFQUFpREksSUFBakQsQ0FBc0QsSUFBdEQsQ0FBakMsQ0FBWjs7QUFFQUYsVUFBTUcsS0FBTixHQUFjO0FBQ1pDLGNBQVEsRUFBRUMsS0FBSyxVQUFQLEVBQW1CQyxLQUFLLENBQUMsVUFBekIsRUFESTtBQUVaQyxZQUFNLEVBRk07QUFHWkMsYUFBTztBQUhLLEtBQWQ7QUFLQSxXQUFPUixLQUFQO0FBQ0Q7O0FBRUQ7Ozs7QUFLQSw2QkFBYUYsSUFBYixFQUFtQixDQUFDO0FBQ2xCVyxTQUFLLG1CQURhO0FBRWxCQyxXQUFPLFNBQVNDLGlCQUFULEdBQTZCO0FBQ2xDLFVBQUlDLE9BQU8sSUFBWDtBQUNBO0FBQ0EsVUFBSSxDQUFDbEIsR0FBTCxFQUFVO0FBQ1I7QUFDQTtBQUNBLFlBQUltQixjQUFjLEtBQUssRUFBTCxHQUFVLElBQTVCO0FBQ0FDLGVBQU9DLFdBQVAsQ0FBbUIsWUFBWTtBQUM3QkgsZUFBS0ksUUFBTCxDQUFjO0FBQ1pSLG1CQUFPSSxLQUFLVCxLQUFMLENBQVdLO0FBRE4sV0FBZDtBQUdELFNBSmtCLENBSWpCUyxJQUppQixDQUlaLElBSlksQ0FBbkIsRUFJY0osV0FKZDtBQUtEO0FBQ0Y7QUFmaUIsR0FBRCxFQWdCaEI7QUFDREosU0FBSyxRQURKO0FBRURDLFdBQU8sU0FBU1EsTUFBVCxHQUFrQjtBQUN2QixVQUFJQyxXQUFXLGdCQUFNQyxhQUFOLENBQW9CLEtBQXBCLEVBQTJCLEVBQUVDLEtBQUssS0FBS2xCLEtBQUwsQ0FBV0ssS0FBbEIsRUFBM0IsQ0FBZjtBQUNBLGFBQU8sZ0JBQU1ZLGFBQU4sQ0FDTCxLQURLLEVBRUw7QUFDRUUsbUJBQVcsbUJBQW1CLEdBQW5CLEdBQXlCLGFBRHRDO0FBRUVDLGtCQUFVO0FBQ1JDLG9CQUFVL0IsWUFERjtBQUVSZ0Msc0JBQVk7QUFGSjtBQUZaLE9BRkssRUFTTCxnQkFBTUwsYUFBTixDQUNFLEtBREYsRUFFRTtBQUNFRSxtQkFBVyxtQkFBbUIsR0FBbkIsR0FBeUIsaUJBRHRDO0FBRUVDLGtCQUFVO0FBQ1JDLG9CQUFVL0IsWUFERjtBQUVSZ0Msc0JBQVk7QUFGSjtBQUZaLE9BRkYsRUFTRU4sUUFURixDQVRLLEVBb0JMLGdCQUFNQyxhQUFOLENBQ0UsS0FERixFQUVFO0FBQ0VFLG1CQUFXLG1CQUFtQixHQUFuQixHQUF5QixpQkFEdEM7QUFFRUMsa0JBQVU7QUFDUkMsb0JBQVUvQixZQURGO0FBRVJnQyxzQkFBWTtBQUZKO0FBRlosT0FGRixFQVNFLGdCQUFNTCxhQUFOLDJCQUErQjtBQUM3Qk0sMEJBQWtCLEVBQUVqQixLQUFLLHlDQUFQLEVBRFc7QUFFN0JhLG1CQUFXLGlCQUZrQjtBQUc3QkssdUJBQWUsS0FBS3hCLEtBQUwsQ0FBV0MsTUFIRztBQUk3QndCLHFCQUFhLEtBQUt6QixLQUFMLENBQVdJLElBSks7QUFLN0JzQixvQkFBWSxDQUFDLGNBQUQsQ0FMaUIsRUFLQ04sVUFBVTtBQUN0Q0Msb0JBQVUvQixZQUQ0QjtBQUV0Q2dDLHNCQUFZO0FBRjBCO0FBTFgsT0FBL0IsQ0FURixDQXBCSyxFQXdDTCxnQkFBTUwsYUFBTixrQkFBK0I7QUFDN0JVLGlCQUFTLFlBRG9CO0FBRTdCQyxhQUFLO0FBRndCLE9BQS9CLENBeENLLENBQVA7QUE2Q0Q7QUFqREEsR0FoQmdCLENBQW5COztBQW9FQSxTQUFPakMsSUFBUDtBQUNELENBM0ZVLENBMkZULGdCQUFNa0MsU0EzRkcsQ0FBWDs7a0JBNkZlbEMsSSIsImZpbGUiOiJ1bmtub3duIn0=