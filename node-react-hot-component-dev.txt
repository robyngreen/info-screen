- Don't invoke with "webpack-dev-server --content-base docroot/ --hot --inline --devtool", just use node and setup environment variables in the config:

  Don't do this in package.json:
    "scripts": {
      "development": "webpack-dev-server --content-base docroot/ --hot --inline --devtool",
      "start": "node app.js info-screen"
    }
  Do this in package.json:
    "scripts": {
      "development": "NODE_ENV=dev node app.js info-screen",
      "start": "NODE_ENV=prod node app.js info-screen"
    }

  Why? Because webpack-dev-server does not pick up wepack.config.js by default. By setting NODE_ENV variables, we can control the entire process in webpack.config.js instead of multiple configurations.

  'info-screen' here is simply the title we give to the node server for easy killing. It is optional. See below 'Stopping node server'

- Don't use ctrl+x, ctrl+r cmd+x, or whatever is appropriate for your environment, to stop node at the command line. This will stop the process _in the window_ but leave it running on your ports, and will throw a fatal error next time you try to spin up the server.

  Invoke node with a param: `node server.js this-is-my-title`

  Then add this to server.js: `process.title = process.argv[2];`

  To stop, simply add a command in package.json to call from the command line. Here "..." line means append the 'stop' below whatever you have existing. Don't literally write '...' in scripts:

  "scripts": {
    ...
    "stop": "killall -SIGINT this-is-my-title"
  }

  And simply run `npm stop` to kill your server.
